syntax = "proto3";
package kvstorepb;

option go_package = "package/kvstorepb";
//Prepare
//Commit
//TxRead
//RawReead
//RawWrite
//RawDelete
message TxContext {
    uint64 TxId = 1;
    uint64 ShardId = 2;
}

message KvTxReadReq {
    TxContext TxContext =1;
    Command  Command = 2;
}

message KvTxReadReply {
    TxContext TxContext = 1;
    Command Command = 2;
    Status Status = 3;
}

message KvTxReq {
    TxContext TxContext = 1;
    repeated Command CommandList = 2;
    repeated Command ReadCommandList = 3;
}

message KvTxReply {
    TxContext TxContext = 1;
    repeated Command CommandList = 2;
    repeated Command ReadCommandList = 3;
    Status Status = 4;
}

message Command {
    uint64 Idx = 1;
    string Op = 2;
    string Key = 3;
    string Val = 4; 
   // string Stage = 5;
}

message KvRawReq {
    uint64 id =1;
    uint64 key =2;    
}

message KvRawReply {
    uint64 id = 1;
    string key =2;
    string val =3;
    Status status = 4;    
}

message KvWriteReq {
    uint64 id = 1; 
    uint64 key = 2;
    uint64 val = 3;    
}

message KvWriteReply {
    uint64 id = 1;
    string key =2;
    string val =3;
    Status status = 4;    
}

//Replica config === Region in tinyKV
// One Replica - one Shard
message KeyRange {
    uint64 StartKey = 1;
    uint64 EndKey = 2;
}

message ReplicaConfig {
    string TxLeader = 1;
    string ReplLeader = 2;
    uint32 ReplicaId = 3;
}

message ShardConfig {
    repeated string   Peers = 1;
    string            TxLeader = 2; 
    KeyRange Key = 3; 
}
message ReplicaJoinReq {
    int32         ShardId = 1;
    ShardConfig   Config = 2;
}

message ReplicaJoinReply {
    Status Status = 1;
}

message ReplicaLeaveReq {
    uint64 ShardId = 1;
}
message ReplicaLeaveReply {
    Status Status = 1;
}

message ReplicaConfigReq {
    ReplicaConfig config = 1;
}
message ReplicaConfigResp {
    Status Status = 1;
}

message ShardConfigReq {
    ShardConfig Config = 1;
}

message ShardConfigResp {
    Status Status = 1;
}

//Shard 
/*message ShardAddReq {
    uint64 ReplicaGid = 1;
    repeated uint64 ShardId = 2;
}

message ShardAddReply {
    Status Status = 1;
}
message ShardDelReq {
    uint64 ReplicaGid = 1;
    repeated uint64 ShardId = 2;
}
message ShardDelReply {
    Status Status = 1;
}*/
/* message KvTxWriteReply {
    TxContext TxContext = 1;
    Command   Command = 2;
    Status Status = 3;
}
*/
enum Status {
    Success = 0;
    Failure = 1;
 }

message KvStoreLeader {
    string kvStoreLeader = 1;
    Status status = 2;
}

message KvNode {
    string KvNode = 1;
    uint64 KvNodeId = 2;
    uint64 KvLeader  = 3;
}

message KvTxStatusReply {
    Status status = 1;
}

message ReplicaStatus {
    repeated KvStoreLeader KvStoreInfo = 1;
}
service kvstore {

    rpc KvTxPrepare (KvTxReq) returns (KvTxReply);
    rpc KvTxCommit (KvTxReq) returns (KvTxReply);
    rpc KvTxRollback (KvTxReq) returns (KvTxReply);
    rpc KvTxRead (KvTxReadReq) returns (KvTxReadReply);
    rpc KvRawRead (KvRawReq) returns (KvRawReply);
    rpc KvRawWrite (KvRawReq) returns (KvRawReply);
    rpc KvRawDelete (KvRawReq) returns (KvRawReply);
    rpc KvReplicaJoin (ReplicaJoinReq) returns (ReplicaJoinReply);
    rpc KvReplicaLeave (ReplicaLeaveReq) returns (ReplicaLeaveReply);
    rpc KvReplicaUpdateConfig(ReplicaConfigReq) returns (ReplicaConfigResp);
    rpc KvShardUpdateConfig(ShardConfigReq) returns (ShardConfigResp);
    //rpc KvAddShard(ShardAddReq) returns (ShardAddReq);
    //rpc KvAddShard(ShardDelReq) returns (ShardDelReq)
    //rpc KvShardMove(ShardMoveReq) returns (ShardMoveReply);

    //XXX:rpc KvGetLeader (TxLeader) returns (KvLeader);
    //XXX:rpc KvGetRaftGroupDetails (TxLeader) returns (stream KvNode);
    //XXX:rpc GetAll (stream Request) returnss (Response);    

}
