syntax = "proto3";
package kvstorepb;

option go_package = "package/kvstorepb";
//Prepare
//Commit
//TxRead
//RawReead
//RawWrite
//RawDelete
message TxContext {
    uint64 txId = 1;
}

message KvTxReadReq {
    TxContext txContext =1;
    Command   command = 2;
}

message KvTxReadReply {
    TxContext txContext = 1;
    Command   command = 2;
    Status status = 3;
}

message Command {
    uint64 idx = 1;
    string op = 2;
    uint64 key = 3;
    uint64 Val = 4; 
}

message KvTxWriteReq {
    TxContext txContext = 1;
    Command   command = 2;
}

message KvTxWriteReply {
    TxContext txContext = 1;
    Command   command = 2;
    Status status = 3;
}

enum Status {
    Success = 0;
    Failure = 1;
 }

message KvReadReq {
    uint64 id =1;
    uint64 key =2;    
}

message KvReadReply {
    uint64 id = 1;
    uint64 key =2;
    uint64 val =3;
    Status status = 4;    
}

message KvWriteReq {
    uint64 id = 1; 
    uint64 key = 2;
    uint64 val = 3;    
}

message KvWriteReply {
    uint64 id = 1;
    uint64 key =2;
    uint64 val =3;
    Status status = 4;    
}

/* message KvStoreLeader {
    string kvStoreLeader = 1;
    Status status = 2;
}

message TxLeader {
    string txLeader = 1;

}

 message KvNode {
    string KvNode = 1;
    uint64 KvNodeId = 2;
    uint64 KvLeader  = 3;
}

*/
service kvstore {

    rpc KvTxPrepare (KvTxWriteReq) returns (KvTxWriteReply);
    rpc KvTxCommit (KvTxWriteReq) returns (KvTxWriteReply);
    rpc KvTxRead (KvTxReadReq) returns (KvTxReadReply);
    rpc KvRawRead (KvReadReq) returns (KvReadReply);
    rpc KvRawWrite (KvWriteReq) returns (KvWriteReply);
    rpc KvRawDelete (KvTxWriteReq) returns (KvTxWriteReply);
    //XXX:rpc KvGetLeader (TxLeader) returns (KvLeader);
    //XXX:rpc KvGetRaftGroupDetails (TxLeader) returns (stream KvNode);
    //XXX:rpc GetAll (stream Request) returnss (Response);    

}
