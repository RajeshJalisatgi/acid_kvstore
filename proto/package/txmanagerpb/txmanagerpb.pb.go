// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/txmanagerpb.proto

package txmanagerpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_Pending  Status = 0
	Status_Commited Status = 1
	Status_Aborted  Status = 2
	Status_Failed   Status = 4
)

var Status_name = map[int32]string{
	0: "Pending",
	1: "Commited",
	2: "Aborted",
	4: "Failed",
}

var Status_value = map[string]int32{
	"Pending":  0,
	"Commited": 1,
	"Aborted":  2,
	"Failed":   4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{0}
}

//Prepare
//Commit
//TxRead
//RawReead
//RawWrite
//RawDelete
type TxContext struct {
	TxId                 uint64   `protobuf:"varint,1,opt,name=txId,proto3" json:"txId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxContext) Reset()         { *m = TxContext{} }
func (m *TxContext) String() string { return proto.CompactTextString(m) }
func (*TxContext) ProtoMessage()    {}
func (*TxContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{0}
}

func (m *TxContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxContext.Unmarshal(m, b)
}
func (m *TxContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxContext.Marshal(b, m, deterministic)
}
func (m *TxContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContext.Merge(m, src)
}
func (m *TxContext) XXX_Size() int {
	return xxx_messageInfo_TxContext.Size(m)
}
func (m *TxContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContext.DiscardUnknown(m)
}

var xxx_messageInfo_TxContext proto.InternalMessageInfo

func (m *TxContext) GetTxId() uint64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type TxComplReq struct {
	TxContext            *TxContext `protobuf:"bytes,1,opt,name=txContext,proto3" json:"txContext,omitempty"`
	Command              *Command   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Status               uint64     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TxComplReq) Reset()         { *m = TxComplReq{} }
func (m *TxComplReq) String() string { return proto.CompactTextString(m) }
func (*TxComplReq) ProtoMessage()    {}
func (*TxComplReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{1}
}

func (m *TxComplReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxComplReq.Unmarshal(m, b)
}
func (m *TxComplReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxComplReq.Marshal(b, m, deterministic)
}
func (m *TxComplReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxComplReq.Merge(m, src)
}
func (m *TxComplReq) XXX_Size() int {
	return xxx_messageInfo_TxComplReq.Size(m)
}
func (m *TxComplReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TxComplReq.DiscardUnknown(m)
}

var xxx_messageInfo_TxComplReq proto.InternalMessageInfo

func (m *TxComplReq) GetTxContext() *TxContext {
	if m != nil {
		return m.TxContext
	}
	return nil
}

func (m *TxComplReq) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *TxComplReq) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type TxResponse struct {
	//TxContext txContext = 1;
	//Command   command = 2;
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=txmanagerpb.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxResponse) Reset()         { *m = TxResponse{} }
func (m *TxResponse) String() string { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()    {}
func (*TxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{2}
}

func (m *TxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxResponse.Unmarshal(m, b)
}
func (m *TxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxResponse.Marshal(b, m, deterministic)
}
func (m *TxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResponse.Merge(m, src)
}
func (m *TxResponse) XXX_Size() int {
	return xxx_messageInfo_TxResponse.Size(m)
}
func (m *TxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxResponse proto.InternalMessageInfo

func (m *TxResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Pending
}

type Command struct {
	Idx                  uint64   `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Op                   string   `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Val                  string   `protobuf:"bytes,4,opt,name=Val,proto3" json:"Val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{3}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetIdx() uint64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Command) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Command) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Command) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type TxReq struct {
	TxContext            *TxContext `protobuf:"bytes,1,opt,name=TxContext,proto3" json:"TxContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TxReq) Reset()         { *m = TxReq{} }
func (m *TxReq) String() string { return proto.CompactTextString(m) }
func (*TxReq) ProtoMessage()    {}
func (*TxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{4}
}

func (m *TxReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxReq.Unmarshal(m, b)
}
func (m *TxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxReq.Marshal(b, m, deterministic)
}
func (m *TxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReq.Merge(m, src)
}
func (m *TxReq) XXX_Size() int {
	return xxx_messageInfo_TxReq.Size(m)
}
func (m *TxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReq.DiscardUnknown(m)
}

var xxx_messageInfo_TxReq proto.InternalMessageInfo

func (m *TxReq) GetTxContext() *TxContext {
	if m != nil {
		return m.TxContext
	}
	return nil
}

type TxReply struct {
	Stage                string   `protobuf:"bytes,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	TxId                 uint64   `protobuf:"varint,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxReply) Reset()         { *m = TxReply{} }
func (m *TxReply) String() string { return proto.CompactTextString(m) }
func (*TxReply) ProtoMessage()    {}
func (*TxReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b677eea7ab720824, []int{5}
}

func (m *TxReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxReply.Unmarshal(m, b)
}
func (m *TxReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxReply.Marshal(b, m, deterministic)
}
func (m *TxReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReply.Merge(m, src)
}
func (m *TxReply) XXX_Size() int {
	return xxx_messageInfo_TxReply.Size(m)
}
func (m *TxReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReply.DiscardUnknown(m)
}

var xxx_messageInfo_TxReply proto.InternalMessageInfo

func (m *TxReply) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *TxReply) GetTxId() uint64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func init() {
	proto.RegisterEnum("txmanagerpb.Status", Status_name, Status_value)
	proto.RegisterType((*TxContext)(nil), "txmanagerpb.TxContext")
	proto.RegisterType((*TxComplReq)(nil), "txmanagerpb.TxComplReq")
	proto.RegisterType((*TxResponse)(nil), "txmanagerpb.TxResponse")
	proto.RegisterType((*Command)(nil), "txmanagerpb.Command")
	proto.RegisterType((*TxReq)(nil), "txmanagerpb.TxReq")
	proto.RegisterType((*TxReply)(nil), "txmanagerpb.TxReply")
}

func init() {
	proto.RegisterFile("proto/txmanagerpb.proto", fileDescriptor_b677eea7ab720824)
}

var fileDescriptor_b677eea7ab720824 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0xab, 0xda, 0x40,
	0x10, 0x6e, 0x62, 0x4c, 0x9a, 0xb1, 0x48, 0x18, 0xad, 0x0d, 0xbd, 0xb4, 0xe4, 0x54, 0x5a, 0xb0,
	0xa0, 0xbd, 0x14, 0xec, 0xa1, 0x15, 0x5a, 0x3c, 0xb5, 0xac, 0xc1, 0x43, 0x6f, 0xab, 0x59, 0x42,
	0x30, 0xc9, 0xae, 0xc9, 0x3e, 0x88, 0x7f, 0xe1, 0xfd, 0xea, 0xc7, 0x6c, 0x62, 0x9e, 0xbe, 0x77,
	0x79, 0xb7, 0x99, 0x6f, 0xbe, 0x6f, 0xe6, 0x9b, 0x9d, 0x85, 0x77, 0xaa, 0x92, 0x5a, 0x7e, 0xd5,
	0x4d, 0xc1, 0x4b, 0x9e, 0x8a, 0x4a, 0xed, 0xe7, 0x06, 0xc1, 0xd1, 0x15, 0x14, 0x7d, 0x00, 0x3f,
	0x6e, 0xd6, 0xb2, 0xd4, 0xa2, 0xd1, 0x88, 0xe0, 0xe8, 0x66, 0x93, 0x84, 0xd6, 0x47, 0xeb, 0x93,
	0xc3, 0x4c, 0x1c, 0xdd, 0x5b, 0x00, 0xc4, 0x28, 0x54, 0xce, 0xc4, 0x09, 0xbf, 0x81, 0xaf, 0x2f,
	0x7c, 0xc3, 0x1b, 0x2d, 0x66, 0xf3, 0xeb, 0x19, 0x7d, 0x37, 0xf6, 0x48, 0xc4, 0x39, 0x78, 0x07,
	0x59, 0x14, 0xbc, 0x4c, 0x42, 0xdb, 0x68, 0xa6, 0x37, 0x9a, 0x75, 0x5b, 0x63, 0x17, 0x12, 0xce,
	0xc0, 0xad, 0x35, 0xd7, 0x77, 0x75, 0x38, 0x30, 0x56, 0xba, 0x2c, 0xfa, 0x4e, 0x5e, 0x98, 0xa8,
	0x95, 0x2c, 0x6b, 0x81, 0x5f, 0x7a, 0x16, 0x19, 0x19, 0x2f, 0x26, 0x37, 0x4d, 0xb7, 0xa6, 0xd4,
	0x4b, 0xff, 0x82, 0xd7, 0x8d, 0xc1, 0x00, 0x06, 0x59, 0xd2, 0x74, 0x5b, 0x52, 0x88, 0x63, 0xb0,
	0xa5, 0x32, 0xd6, 0x7c, 0x66, 0x4b, 0x45, 0x8c, 0xa3, 0x38, 0x9b, 0xe1, 0x3e, 0xa3, 0x90, 0x90,
	0x1d, 0xcf, 0x43, 0xa7, 0x45, 0x76, 0x3c, 0x8f, 0x7e, 0xc0, 0x90, 0xbc, 0x98, 0x27, 0x89, 0x5f,
	0xfa, 0x24, 0x7d, 0x18, 0x2d, 0xc1, 0x23, 0xb9, 0xca, 0xcf, 0x38, 0x85, 0xe1, 0x56, 0xf3, 0x54,
	0x18, 0xb1, 0xcf, 0xda, 0x84, 0x8e, 0x11, 0xd3, 0x31, 0xec, 0xf6, 0x18, 0x14, 0x7f, 0x5e, 0x81,
	0xdb, 0xae, 0x85, 0x23, 0xf0, 0xfe, 0x89, 0x32, 0xc9, 0xca, 0x34, 0x78, 0x85, 0x6f, 0xe0, 0x35,
	0xed, 0x96, 0x69, 0x91, 0x04, 0x16, 0x95, 0x7e, 0xee, 0x65, 0x45, 0x89, 0x8d, 0x00, 0xee, 0x6f,
	0x9e, 0xe5, 0x22, 0x09, 0x9c, 0xc5, 0x86, 0x6e, 0xd7, 0xd9, 0xc2, 0x15, 0x04, 0x71, 0xf3, 0x47,
	0x68, 0x26, 0x0e, 0xb2, 0x4a, 0xa8, 0xab, 0x40, 0x7c, 0x62, 0x9b, 0x89, 0xd3, 0xfb, 0xe9, 0x33,
	0x4c, 0xe5, 0xe7, 0x5f, 0x6f, 0xff, 0x4f, 0x14, 0x3f, 0x1c, 0x79, 0x2a, 0xae, 0x3f, 0xd8, 0xde,
	0x35, 0x3f, 0x6c, 0xf9, 0x10, 0x00, 0x00, 0xff, 0xff, 0x23, 0x89, 0x8f, 0x09, 0x7c, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TxmanagerClient is the client API for Txmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxmanagerClient interface {
	TxGetRecordState(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxReply, error)
}

type txmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTxmanagerClient(cc grpc.ClientConnInterface) TxmanagerClient {
	return &txmanagerClient{cc}
}

func (c *txmanagerClient) TxGetRecordState(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxReply, error) {
	out := new(TxReply)
	err := c.cc.Invoke(ctx, "/txmanagerpb.txmanager/TxGetRecordState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxmanagerServer is the server API for Txmanager service.
type TxmanagerServer interface {
	TxGetRecordState(context.Context, *TxReq) (*TxReply, error)
}

// UnimplementedTxmanagerServer can be embedded to have forward compatible implementations.
type UnimplementedTxmanagerServer struct {
}

func (*UnimplementedTxmanagerServer) TxGetRecordState(ctx context.Context, req *TxReq) (*TxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxGetRecordState not implemented")
}

func RegisterTxmanagerServer(s *grpc.Server, srv TxmanagerServer) {
	s.RegisterService(&_Txmanager_serviceDesc, srv)
}

func _Txmanager_TxGetRecordState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxmanagerServer).TxGetRecordState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txmanagerpb.txmanager/TxGetRecordState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxmanagerServer).TxGetRecordState(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Txmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txmanagerpb.txmanager",
	HandlerType: (*TxmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TxGetRecordState",
			Handler:    _Txmanager_TxGetRecordState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/txmanagerpb.proto",
}
