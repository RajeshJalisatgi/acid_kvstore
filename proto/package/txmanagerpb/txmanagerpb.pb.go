// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: proto/txmanagerpb.proto

package txmanagerpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status int32

const (
	Status_Pending  Status = 0
	Status_Commited Status = 1
	Status_Aborted  Status = 2
	Status_Failed   Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "Pending",
		1: "Commited",
		2: "Aborted",
		4: "Failed",
	}
	Status_value = map[string]int32{
		"Pending":  0,
		"Commited": 1,
		"Aborted":  2,
		"Failed":   4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_txmanagerpb_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_proto_txmanagerpb_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{0}
}

//Prepare
//Commit
//TxRead
//RawReead
//RawWrite
//RawDelete
type TxContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId uint64 `protobuf:"varint,1,opt,name=txId,proto3" json:"txId,omitempty"`
}

func (x *TxContext) Reset() {
	*x = TxContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxContext) ProtoMessage() {}

func (x *TxContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxContext.ProtoReflect.Descriptor instead.
func (*TxContext) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{0}
}

func (x *TxContext) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

type TxComplReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxContext *TxContext `protobuf:"bytes,1,opt,name=txContext,proto3" json:"txContext,omitempty"`
	Command   *Command   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Status    uint64     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TxComplReq) Reset() {
	*x = TxComplReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxComplReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxComplReq) ProtoMessage() {}

func (x *TxComplReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxComplReq.ProtoReflect.Descriptor instead.
func (*TxComplReq) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{1}
}

func (x *TxComplReq) GetTxContext() *TxContext {
	if x != nil {
		return x.TxContext
	}
	return nil
}

func (x *TxComplReq) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TxComplReq) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//TxContext txContext = 1;
	//Command   command = 2;
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=txmanagerpb.Status" json:"status,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{2}
}

func (x *TxResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Pending
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx uint64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Op  string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Val string `protobuf:"bytes,4,opt,name=Val,proto3" json:"Val,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{3}
}

func (x *Command) GetIdx() uint64 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *Command) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *Command) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Command) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxContext *TxContext `protobuf:"bytes,1,opt,name=TxContext,proto3" json:"TxContext,omitempty"`
}

func (x *TxReq) Reset() {
	*x = TxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReq) ProtoMessage() {}

func (x *TxReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReq.ProtoReflect.Descriptor instead.
func (*TxReq) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{4}
}

func (x *TxReq) GetTxContext() *TxContext {
	if x != nil {
		return x.TxContext
	}
	return nil
}

type TxReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage string `protobuf:"bytes,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	TxId  uint64 `protobuf:"varint,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
}

func (x *TxReply) Reset() {
	*x = TxReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_txmanagerpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReply) ProtoMessage() {}

func (x *TxReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_txmanagerpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReply.ProtoReflect.Descriptor instead.
func (*TxReply) Descriptor() ([]byte, []int) {
	return file_proto_txmanagerpb_proto_rawDescGZIP(), []int{5}
}

func (x *TxReply) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *TxReply) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

var File_proto_txmanagerpb_proto protoreflect.FileDescriptor

var file_proto_txmanagerpb_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x78, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x22, 0x1f, 0x0a, 0x09, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x78, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x09, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x6c,
	0x22, 0x3d, 0x0a, 0x05, 0x54, 0x78, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x09, 0x54, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x09, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x33, 0x0a, 0x07, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x54, 0x78, 0x49, 0x64, 0x2a, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x04, 0x32, 0x49, 0x0a, 0x09, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x10, 0x54, 0x78, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x15, 0x5a,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x78, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_txmanagerpb_proto_rawDescOnce sync.Once
	file_proto_txmanagerpb_proto_rawDescData = file_proto_txmanagerpb_proto_rawDesc
)

func file_proto_txmanagerpb_proto_rawDescGZIP() []byte {
	file_proto_txmanagerpb_proto_rawDescOnce.Do(func() {
		file_proto_txmanagerpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_txmanagerpb_proto_rawDescData)
	})
	return file_proto_txmanagerpb_proto_rawDescData
}

var file_proto_txmanagerpb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_txmanagerpb_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_txmanagerpb_proto_goTypes = []interface{}{
	(Status)(0),        // 0: txmanagerpb.Status
	(*TxContext)(nil),  // 1: txmanagerpb.TxContext
	(*TxComplReq)(nil), // 2: txmanagerpb.TxComplReq
	(*TxResponse)(nil), // 3: txmanagerpb.TxResponse
	(*Command)(nil),    // 4: txmanagerpb.Command
	(*TxReq)(nil),      // 5: txmanagerpb.TxReq
	(*TxReply)(nil),    // 6: txmanagerpb.TxReply
}
var file_proto_txmanagerpb_proto_depIdxs = []int32{
	1, // 0: txmanagerpb.TxComplReq.txContext:type_name -> txmanagerpb.TxContext
	4, // 1: txmanagerpb.TxComplReq.command:type_name -> txmanagerpb.Command
	0, // 2: txmanagerpb.TxResponse.status:type_name -> txmanagerpb.Status
	1, // 3: txmanagerpb.TxReq.TxContext:type_name -> txmanagerpb.TxContext
	5, // 4: txmanagerpb.txmanager.TxGetRecordState:input_type -> txmanagerpb.TxReq
	6, // 5: txmanagerpb.txmanager.TxGetRecordState:output_type -> txmanagerpb.TxReply
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_txmanagerpb_proto_init() }
func file_proto_txmanagerpb_proto_init() {
	if File_proto_txmanagerpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_txmanagerpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_txmanagerpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxComplReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_txmanagerpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_txmanagerpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_txmanagerpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_txmanagerpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_txmanagerpb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_txmanagerpb_proto_goTypes,
		DependencyIndexes: file_proto_txmanagerpb_proto_depIdxs,
		EnumInfos:         file_proto_txmanagerpb_proto_enumTypes,
		MessageInfos:      file_proto_txmanagerpb_proto_msgTypes,
	}.Build()
	File_proto_txmanagerpb_proto = out.File
	file_proto_txmanagerpb_proto_rawDesc = nil
	file_proto_txmanagerpb_proto_goTypes = nil
	file_proto_txmanagerpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TxmanagerClient is the client API for Txmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxmanagerClient interface {
	TxGetRecordState(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxReply, error)
}

type txmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTxmanagerClient(cc grpc.ClientConnInterface) TxmanagerClient {
	return &txmanagerClient{cc}
}

func (c *txmanagerClient) TxGetRecordState(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxReply, error) {
	out := new(TxReply)
	err := c.cc.Invoke(ctx, "/txmanagerpb.txmanager/TxGetRecordState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxmanagerServer is the server API for Txmanager service.
type TxmanagerServer interface {
	TxGetRecordState(context.Context, *TxReq) (*TxReply, error)
}

// UnimplementedTxmanagerServer can be embedded to have forward compatible implementations.
type UnimplementedTxmanagerServer struct {
}

func (*UnimplementedTxmanagerServer) TxGetRecordState(context.Context, *TxReq) (*TxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxGetRecordState not implemented")
}

func RegisterTxmanagerServer(s *grpc.Server, srv TxmanagerServer) {
	s.RegisterService(&_Txmanager_serviceDesc, srv)
}

func _Txmanager_TxGetRecordState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxmanagerServer).TxGetRecordState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txmanagerpb.txmanager/TxGetRecordState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxmanagerServer).TxGetRecordState(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Txmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txmanagerpb.txmanager",
	HandlerType: (*TxmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TxGetRecordState",
			Handler:    _Txmanager_TxGetRecordState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/txmanagerpb.proto",
}
